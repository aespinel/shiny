#summarize total emissions per year
plotdat <- group_by(NEI, year) %>%
summarise(
sum = sum(Emissions)
)
png("plot1.png",width = 1024, height = 640, units = "px")
plot(plotdat$sum~plotdat$year, type=c("l"),
xlab = "Year", ylab = "Total Emissions (kg)",
main = "Total PM2.5 Emissions by Year",
lwd = 2)
#nice to have regression line
rl <- lm(sum ~ year,plotdat)
abline(rl, lwd = 1, ,lty = 4,col = 'blue')
legend("topright", col=c("black", "blue"),
lty=c(1,4), lwd=c(2,1),
legend = c("Emissions","Regression"))
dev.off()
install.packages("MODISTools")
data(SubsetExample)
MODISSubsets(LoadDat = SubsetExample, Products = "MOD13Q1", Bands = c("250m_16_days_EVI",
"250m_16_days_pixel_reliability"), Size = c(0,0), StartDate = TRUE)
MODISSummaries(LoadDat = SubsetExample, Product = "MOD13Q1", Bands = "250m_16_days_EVI",
ValidRange = c(-2000,10000), NoDataFill = -3000, ScaleFactor = 0.0001,
StartDate = TRUE, QualityScreen = TRUE, QualityThreshold = 0,
QualityBand = "250m_16_days_pixel_reliability")
library("MODISTools", lib.loc="~/R/win-library/3.1")
data(SubsetExample)
MODISSubsets(LoadDat = SubsetExample, Products = "MOD13Q1", Bands = c("250m_16_days_EVI",
"250m_16_days_pixel_reliability"), Size = c(0,0), StartDate = TRUE)
MODISSummaries(LoadDat = SubsetExample, Product = "MOD13Q1", Bands = "250m_16_days_EVI",
ValidRange = c(-2000,10000), NoDataFill = -3000, ScaleFactor = 0.0001,
StartDate = TRUE, QualityScreen = TRUE, QualityThreshold = 0,
QualityBand = "250m_16_days_pixel_reliability")
View(SubsetExample)
##Please make sure you have installed the SSOAP library: in R window, choose menu "Packages->Install pacages", choose any location, choose "SSOAP"
##Then you may try the following command to get the subset data you would like to require:
## load the package
library(SSOAP)
## get the SOAP service
ornlMODIS = processWSDL("http://daac.ornl.gov/cgi-bin/MODIS/GLBVIZ_1_Glb_subset/MODIS_webservice.wsdl")
## define the function set
ornlMODISFuncs = genSOAPClientInterface(operations=ornlMODIS@operations[[1]], def=ornlMODIS)
## use the getsubset function
result = ornlMODISFuncs@functions$getsubset(40.115,-110.025,"MOD11A2","LST_Day_1km","A2001001","A2001025",1,1)
## print result
print(result)
install.packages("knitr")
library("knitr", lib.loc="~/R/win-library/3.1")
<<my-label, eval=TRUE, dev='png'>>=
set.seed(1213)  # for reproducibility
x = cumsum(rnorm(100))
mean(x)  # mean of x
plot(x, type = 'l')  # Brownian motion
@
set.seed(1213)  # for reproducibility
x = cumsum(rnorm(100))
mean(x)  # mean of x
## [1] -1.939758
plot(x, type = 'l')  # Brownian motion
library(ggplot2)
qplot(Sepal.Length, Petal.Length, data = iris, color = Species)
qplot(wt, mpg, data=mtcars, colour=factor(cyl))
qplot(factor(cyl), mpg, data = mtcars, geom = "boxplot")
qplot(factor(cyl), mpg, data = mtcars, geom = "boxplot")
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
colummean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- meany[,i])
}
means
}
colummean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
colummean(airquality)
colummean(airquality)
colummean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = true)
}
means
}
colummean(airquality)
colummean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
colummean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
olummean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
colummean(airquality)
olummean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
olummean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
colummean(airquality)
olummean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
colummean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
colummean(airquality)
source('~/.active-rstudio-document', echo=TRUE)
colummean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
colummean(airquality)
source('~/.active-rstudio-document', echo=TRUE)
columean(airquality)
colummean(airquality)
source('~/.active-rstudio-document', echo=TRUE)
colummean(airquality)
source('~/.active-rstudio-document', echo=TRUE)
columnmean(airquality)
colummean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
colummean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document')
columnmean(airquality)
columnmean(airquality)
colummean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(airquality)
colummean(airquality)
colummean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = TRUEoveNA)
}
means
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document')
columnmean(airquality)
args(lm)
args(paste)
search()
ls(environment(olummean))
f(3)
source('~/.active-rstudio-document')
f(3)
y
g
x
g(3)
f(3)
?length()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:10
if(x > 5) {
x <- 0
}f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <-10
f(3)
z
x
x
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <-10
f(3)
x
y
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
swirl()
library("swirl", lib.loc="~/R/win-library/3.1")
swirl()
save.image("~/datascience/swirl/init.RData")
libary(swirl)
library(swirl)
x <- list(a = 1:5, b = rnorm(10))
x
lapply(x, mean)
str(x)
sapply(x, mean)
s <- split(airquality, airquality$Mon
s <- split(airquality, airquality$Month)
<- split(airquality, airquality$Month)
s <- split(airquality, airquality$Month)
lapply (s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply (s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
sapply (s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
f1
x <-  rnorm(10)
f1 <- gl(2, 5)
f2 <- gl(5, 2)
f1
f2
?gl()
interaction(f1, f2)
printmessage2 <- function(X) {
if(is.na(x))
print("x is a missing value")
else if(x > 0)
print(x"x is greater tha zero")
else
print("x is less than zero or =")
invisible(x)
}
printmessage2 <- function(X) {
if(is.na(x))
print("x is a missing value")
else if(x > 0)
print("x is greater tha zero")
else
print("x is less than zero or =")
invisible(x)
}
x <- log(-1)
printmessage2 <- function(X) {
if(is.na(x))
print("x is a missing value")
else if(x > 0)
print("x is greater tha zero")
else
print("x is less than zero or =")
# invisible(x)
}
x <- log(-1)
printmessage2(x)
rintmessage2 <- function(X) {
if(is.na(x))
print("x is a missing value")
else if(x > 0)
print("x is greater tha zero")
else
print("x is less than zero or =")
# invisible(x)
}
x <- log(-1)
rintmessage2(x)
printmessage2 <- function(X) {
if(is.na(x))
print("x is a missing value")
else if(x > 0)
print("x is greater tha zero")
else
print("x is less than zero or =")
# invisible(x)
}
x <- log(-1)
printmessage2(x)
printmessage2 <- function(X) {
if(is.na(x))
print("x is a missing value")
else if(x > 0)
print("x is greater tha zero")
else
print("x is less than zero or =")
invisible(x)
}
invisible(x)
R.version.string
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child ~ paent, galton)
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(ols.slope)
varEst <- var(est(ols.slope, ols.ic))
all.Equal(varChild, sum(varRes,varEst))
all.equal(varChild, sum(varRes,varEst))
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
efit$residuals
mean(efit$residuals)
cov(attenu$mag, efit$residuals)
cov(attenu$dist, efit$residuals)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
yc <- (y - mean(y))/sd(y)
xc <- (x - mean(x))/sd(x)
lm(yc ~ xc)
lm(xc ~ yc)
yc <- (y - mean(y))
xc <- (x - mean(x))
lm(xc ~ yc)
beta1 <- sum(yc * xc) / sum(xc ^ 2)
c(beta1, coef(lm(y ~ x))[2])
c(beta1, coef(lm(x ~ y))[2])
yc <- (y - mean(y)/sd(y))
xc <- (x - mean(x)/sd(x))
lm(yc ~ xc)
lm(xc ~ yc)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
xc <- (x - 1.567)
lm(xc ~ y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x ~ y)
yc <- (y - mean(y))/sd(y)
xc <- (x - mean(x))/sd(x)
lm(xc ~ yc)
lm(yc ~ xc)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x ~ y)
yc <- (y - mean(y))
xc <- (x - mean(x))
lm(yc ~ xc)
beta1 <- sum(yc * xc) / sum(xc ^ 2)
c(beta1, coef(lm(y ~ x))[2])
yn <- (y - mean(y))/sd(y)
xn <- (x - mean(x))/sd(x)
c(cor(y, x), cor(yn, xn), coef(lm(yn ~ xn))[2])
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
rexp?
?rexp()
setwd("~/datascience/shiny/censusapp")
library("slidify", lib.loc="~/R/win-library/3.1")
library("slidifyLibraries", lib.loc="~/R/win-library/3.1")
library("shinyapps", lib.loc="~/R/win-library/3.1")
library("shiny", lib.loc="~/R/win-library/3.1")
author()
author(.)
author(slides)
author("/")
slidify("indes.Rmd")
slidify("index.Rmd")
library("slidify")
slidify("index.Rmd")
setwd("~/datascience/shiny/censusapp")
slidify("index.Rmd")
author("slides")
slidify("index.Rmd")
install_version
install_version help()
install_version help(install_version)
help(install_version)
install_version("stringr", version="0.6.2")
library("devtools", lib.loc="~/R/win-library/3.1")
install_version("stringr", version="0.6.2")
install.packages('http://cran.r-project.org/src/contrib/Archive/stringr/stringr_0.6.2.tar.gz', type = 'source')
devtools::session_info():
devtools::session_info()
install.packages("C:/Users/Edward/Downloads/stringr_0.6.2.tar.gz", repos = NULL, type = "source")
devtools::session_info()
devtools::session_info()
devtools::session_info()
install_github('ramnathv/slidify', ref = github_pull(425))
library("installr", lib.loc="~/R/win-library/3.1")
install_github('ramnathv/slidify', ref = github_pull(425))
library("devtools", lib.loc="~/R/win-library/3.1")
library("knitr", lib.loc="~/R/win-library/3.1")
library("rsconnect", lib.loc="~/R/win-library/3.1")
library("shiny", lib.loc="~/R/win-library/3.1")
library("shinyapps", lib.loc="~/R/win-library/3.1")
library("slidify", lib.loc="~/R/win-library/3.1")
library("slidifyLibraries", lib.loc="~/R/win-library/3.1")
install_github('ramnathv/slidify', ref = github_pull(425))
options(rpubs.upload.method = "internal")
publish_rpubs(title = 'Races in USA', html_file = 'index.html')
library("devtools", lib.loc="~/R/win-library/3.1")
library("RCurl", lib.loc="~/R/win-library/3.1")
library("shiny", lib.loc="~/R/win-library/3.1")
library("shinyapps", lib.loc="~/R/win-library/3.1")
library("slidify", lib.loc="~/R/win-library/3.1")
library("slidifyLibraries", lib.loc="~/R/win-library/3.1")
publish_rpubs(title = "Races in USA", html_file = "index.html")
setwd("~/datascience/shiny/censusapp/slides")
library("maps", lib.loc="~/R/win-library/3.1")
library("mapproj", lib.loc="~/R/win-library/3.1")
options(rpubs.upload.method = "internal")
publish_rpubs(title = 'Races in USA', html_file = 'index.html')
publish_rpubs(title = 'Races in USA', html_file = 'index.html')
setwd("~/GitHub/shiny")
publish_rpubs(title = 'Races in USA', html_file = 'index.html')
shiny::runApp()
shiny::runApp()
shiny::runApp()
